# Portfolio Développeuse — Projet Full Stack React / .NET

Ce projet est un portfolio personnel développé en React (frontend) et .NET (backend).

---

## 📦 Structure du projet

- `react-portfolio/` → Application frontend développée avec **React, HTML, CSS et JavaScript**
- `dotnet-portfolio-api/` → API backend développée avec **.NET 8**, exposant des données via une API REST

Les deux projets sont séparés dans des dossiers distincts pour garantir une indépendance entre le front et le back. Cela permet de maintenir et déployer chaque partie de manière isolée.

---

## 🗂️ Fonctionnalités actuelles

- Affichage des compétences (nom, catégorie, niveau)
- Données exposées via une API REST (`/api/competences`)
- Intégration React avec appel à l'API via `fetch()`
- Stockage temporaire des données via une **base en mémoire** (`UseInMemoryDatabase`)

---

## 🧪 Technologies utilisées

- **Frontend** : React, JavaScript, HTML, CSS
- **Backend** : .NET 8, Entity Framework Core, InMemoryDatabase
- **Outils** : Visual Studio Code, Swagger (optionnel), Git

---

## 🔄 À venir

- Ajout d'autres sections (projets, expériences, contact)
- Amélioration du design et de la responsivité (probablement via Tailwind CSS ou Bootstrap)

---

## 🚀 Lancer le projet

### Backend (.NET)
```bash
dotnet run
```

## BDD SQLite
Pour la BDD j'utile SQLite qui est la solution la plus simple actuellement pour mes besoins. SQLite3 me permet d'ajouter des données via la commande sqlite3 que j'ai configuré comme variable d'environnement.

Générer les scripts (migration) nécéssaires pour mes tables :
dotnet ef migrations add InitialCreate

Mettre a jour SQLite avec la migration générée :
dotnet ef database update


